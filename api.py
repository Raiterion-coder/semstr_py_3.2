import requests
from dotenv import load_dotenv
import random
import json
import os

load_dotenv()
OMDB_API_KEY = os.getenv("OMDB_API_KEY")  # –ö–ª—é—á –¥–ª—è OMDb API
TMDB_API_KEY = os.getenv("TMDB_API_KEY")  # –ö–ª—é—á –¥–ª—è TMDb API


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ quotes.json
def get_random_quote():
    file_path = os.path.join(os.path.dirname(__file__), "quotes.json")

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            quotes = json.load(f)  # –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ü–∏—Ç–∞—Ç –∏–∑ JSON-—Ñ–∞–π–ª–∞

        if not quotes:
            return "–¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        quote_data = random.choice(quotes)
        return f"üí¨ \"{quote_data['quote']}\"\nüé≠ {quote_data['character']}\nüé¨ {quote_data['movie']}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–∏—Ç–∞—Ç: {str(e)}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ñ–∏–ª—å–º–∞ –∏–∑ OMDb API
def get_rating(title):
    url = f"http://www.omdbapi.com/?t={title}&apikey={OMDB_API_KEY}"
    r = requests.get(url)

    if r.status_code != 200:
        return None

    data = r.json()

    if data.get("Response") == "False":
        return None

    ratings_list = data.get("Ratings", [])  # –°–ø–∏—Å–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if not ratings_list:
        return None

    ratings_lines = []  # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

    for r in ratings_list:
        source = r['Source']
        value = r['Value']

        # IMDb —Ä–µ–π—Ç–∏–Ω–≥
        if source == "Internet Movie Database":
            imdb_rating = float(value.split('/')[0])
            stars = round(imdb_rating / 2)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ 0‚Äì10 –≤ 0‚Äì5 –∑–≤—ë–∑–¥
            star_str = "‚òÖ" * stars + "‚òÜ" * (5 - stars)
            ratings_lines.append(f"‚≠êIMDb: {star_str} ({value})")

        # Rotten Tomatoes —Ä–µ–π—Ç–∏–Ω–≥
        elif source == "Rotten Tomatoes":
            rt_rating = int(value.replace('%', ''))
            stars = round(rt_rating / 20)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤ –∑–≤—ë–∑–¥—ã
            star_str = "‚òÖ" * stars + "‚òÜ" * (5 - stars)
            ratings_lines.append(f"‚≠êRotten Tomatoes: {star_str} ({value})")

        # Metacritic —Ä–µ–π—Ç–∏–Ω–≥
        elif source == "Metacritic":
            mc_rating = int(value.split('/')[0])
            stars = round(mc_rating / 20)
            star_str = "‚òÖ" * stars + "‚òÜ" * (5 - stars)
            ratings_lines.append(f"‚≠êMetacritic: {star_str} ({value})")

        else:
            ratings_lines.append(f"{source}: {value}")

    return "\n".join(ratings_lines)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
def get_summary(title):
    url = f"http://www.omdbapi.com/?t={title}&apikey={OMDB_API_KEY}"
    r = requests.get(url)

    if r.status_code != 200:
        return None

    data = r.json()

    if data.get("Response") == "False":
        return None

    plot = data.get("Plot")  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è (Plot)

    if not plot or plot == "N/A":
        return None

    return f"üìÉ–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ {title}üìÉ \n {plot}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ –∏–∑ TMDb
def get_random_film():
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    url = f"https://api.themoviedb.org/3/movie/popular?api_key={TMDB_API_KEY}&language=RU-US&page=1"
    response = requests.get(url).json()
    total_pages = response.get('total_pages', 1)

    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    random_page = random.randint(1, min(total_pages, 500))
    url = f"https://api.themoviedb.org/3/movie/popular?api_key={TMDB_API_KEY}&language=en-US&page={random_page}"
    response = requests.get(url).json()

    films = response.get('results', [])  # –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    if not films:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º—ã."

    random_film = random.choice(films)  # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞
    random_title = random_film['title']
    random_year = random_film.get('release_date', '')[:4]  # –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞

    summary = get_summary(random_title)
    rating = get_rating(random_title)

    result = f"üé¨ {random_title}"
    if random_year:
        result += f" ({random_year})"
    result += "\n"

    if summary:
        result += f"{summary}\n"

    if rating:
        result += f"\n{rating}"

    return result
